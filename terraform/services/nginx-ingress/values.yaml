controller:
  kind: deployment
  nginxplus: false

  nginxReloadTimeout: 0

  ## Support for App Protect
  appprotect:
    ## Enable the App Protect module in the Ingress Controller.
    enable: false

  ## Enables the Ingress controller pods to use the host's network namespace.
  hostNetwork: false

  ## Enables debugging for NGINX. Uses the nginx-debug binary. Requires error-log-level: debug in the ConfigMap via `controller.config.entries`.
  nginxDebug: false

  ## The log level of the Ingress Controller.
  logLevel: 1

  ## A list of custom ports to expose on the NGINX ingress controller pod. Follows the conventional Kubernetes yaml syntax for container ports.
  customPorts: []

  image:
    repository: nginx/nginx-ingress
    tag: "1.8.0"
    pullPolicy: IfNotPresent

  config:
    name: nginx-config
    annotations: {}
    entries: {}

  terminationGracePeriodSeconds: 30

  resources:
    limits:
      cpu: 100m
      memory: 64Mi
    requests:
      cpu: 100m
      memory: 64Mi

  replicaCount: 1

  ingressClass: nginx
  useIngressClassOnly: false

  watchNamespace: ""

  enableCustomResources: true
  enableTLSPassthrough: false
  enableSnippets: false

  healthStatus: true
  healthStatusURI: "/health"

  nginxStatus:
    enable: true
    port: 8080
    allowCidrs: "127.0.0.1"

  service:
    create: true
    type: NodePort
    externalTrafficPolicy: Local
    annotations: {}
    loadBalancerIP: ""
    externalIPs: ["95.111.255.183"]
    loadBalancerSourceRanges: []
    name: nginx-ingress

    httpPort:
      enable: true
      port: 80
      nodePort: 31080
      targetPort: 80

    httpsPort:
      enable: true
      port: 443
      nodePort: 31443
      targetPort: 443

    ## A list of custom ports to expose through the Ingress controller service. Follows the conventional Kubernetes yaml syntax for service ports.
    customPorts: []

  serviceAccount:
    ## The name of the service account of the Ingress controller pods. Used for RBAC.
    ## Autogenerated if not set or set to "".
    # name: nginx-ingress

    ## The names of the secrets containing docker registry credentials.
    imagePullSecrets:
      []
      # - name: secret_name

  reportIngressStatus:
    ## Update the address field in the status of Ingresses resources with an external address of the Ingress controller.
    ## You must also specify the source of the external address either through an external service via controller.reportIngressStatus.externalService or the external-status-address entry in the ConfigMap via controller.config.entries.
    ## Note: controller.config.entries.external-status-address takes precedence if both are set.
    enable: true

    ## Specifies the name of the service with the type LoadBalancer through which the Ingress controller is exposed externally.
    ## The external address of the service is used when reporting the status of Ingress resources. controller.reportIngressStatus.enable must be set to true.
    ## The default is autogenerated and matches the created service (see controller.service.create).
    # externalService: nginx-ingress

    ## Enable Leader election to avoid multiple replicas of the controller reporting the status of Ingress resources. controller.reportIngressStatus.enable must be set to true.
    enableLeaderElection: true

    ## Specifies the name of the ConfigMap, within the same namespace as the controller, used as the lock for leader election. controller.reportIngressStatus.enableLeaderElection must be set to true.
    ## Autogenerated if not set or set to "".
    # leaderElectionLockName: "nginx-ingress-leader-election"

    ## The annotations of the leader election configmap.
    annotations: {}

  pod:
    ## The annotations of the Ingress Controller pod.
    annotations: {}

  ## The PriorityClass of the ingress controller pods.
  priorityClassName:

  readyStatus:
    ## Enables readiness endpoint "/nginx-ready". The endpoint returns a success code when NGINX has loaded all the config after startup.
    enable: true

    ## Set the port where the readiness endpoint is exposed.
    port: 8081

rbac:
  ## Configures RBAC.
  create: true

prometheus:
  ## Expose NGINX or NGINX Plus metrics in the Prometheus format.
  create: true

  ## Configures the port to scrape the metrics.
  port: 9113
